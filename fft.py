import numpy as np
import math
import sys
import matplotlib.pyplot as plt
import scipy.fftpack as sf
from matplotlib.colors import LogNorm
from skimage import io


def pad_to_power_2(x_raw):
    N = x_raw.shape[0]
    N_ceil = pow(2, math.ceil(math.log(N, 2)))
    if N - N_ceil == 0:
        return x_raw, N
    else:
        x_append = np.zeros(N_ceil - N)
        return np.append(x_raw, x_append), N_ceil


def dft(x):
    x = np.asarray(x, dtype=np.complex_)
    N = x.shape[0]
    n_small = np.asarray(range(0, N), dtype=np.complex_)
    k = n_small.reshape((N, 1))
    coe = np.exp(-2j * np.pi * k * n_small / N)
    return np.dot(coe, x)


def dft_inv(X):
    X = np.asarray(X, dtype=np.complex_)
    N = X.shape[0]
    n_small = np.asarray(range(0, N), dtype=np.complex_)
    k = n_small.reshape((N, 1))
    coe = np.exp(2j * np.pi * k * n_small / N)
    return np.dot(coe, X)


def fft(x_raw):
    x_raw = np.asarray(x_raw)
    x, N = pad_to_power_2(x_raw)

    if N <= 2:
        return dft(x)
    else:
        X_even = fft(x[::2])
        X_odd = fft(x[1::2])
        coe = np.exp(-2j * np.pi * np.arange(N) / N)
        return np.concatenate((X_even + coe[:int(N / 2)] * X_odd,
                               X_even + coe[int(N / 2):] * X_odd))


def fft_inv_helper(x_raw):
    x_raw = np.asarray(x_raw)
    x, N = pad_to_power_2(x_raw)

    if N <= 2:
        return dft_inv(x)
    else:
        X_even = fft_inv_helper(x[::2])
        X_odd = fft_inv_helper(x[1::2])
        coe = np.exp(2j * np.pi * np.arange(N) / N)
        return np.concatenate([X_even + coe[:int(N / 2)] * X_odd,
                               X_even + coe[int(N / 2):] * X_odd])


def fft_inv(x_raw):
    x, N = pad_to_power_2(x_raw)
    coe = 1 / N
    result = coe * np.array(fft_inv_helper(x_raw))
    return result


def twoddft(signal: np.array):
    row, column = signal.shape
    columns_transformation = []
    for c in range(column):
        columns_transformation.append(dft(signal[:, c]))

    final_result = []
    columns_transformation = np.asarray(columns_transformation, dtype=np.complex_).T
    for r in range(row):
        final_result.append(dft(columns_transformation[r, :]))

    final_result = np.asarray(final_result, dtype=np.complex_)
    zero_padding = np.zeros((columns_transformation.shape[0] - row, final_result.shape[1]), dtype=np.complex_)
    return np.append(final_result, zero_padding, 0)


def twodfft(signal: np.array):
    row, column = signal.shape
    columns_transformation = []
    for c in range(column):
        columns_transformation.append(fft(signal[:, c]))

    final_result = []
    columns_transformation = np.asarray(columns_transformation, dtype=np.complex_).T
    for r in range(row):
        final_result.append(fft(columns_transformation[r, :]))

    final_result = np.asarray(final_result, dtype=np.complex_)
    zero_padding = np.zeros((columns_transformation.shape[0] - row, final_result.shape[1]), dtype=np.complex_)
    return np.append(final_result, zero_padding, 0)


def twodfft_inverse(signal: np.array):
    row, column = signal.shape
    columns_inverse = []
    for c in range(column):
        columns_inverse.append(fft_inv(signal[:, c]))

    final_result = []
    columns_inverse = np.asarray(columns_inverse, dtype=np.complex_).T
    for r in range(row):
        final_result.append(fft_inv(columns_inverse[r, :]))

    final_result = np.asarray(final_result, dtype=np.complex_)
    zero_padding = np.zeros((columns_inverse.shape[0] - row, final_result.shape[1]), dtype=np.complex_)
    return np.append(final_result, zero_padding, 0)


def mode1(img_data_raw):
    sfft = twodfft(img_data_raw)
    # the 2dfft generated by our function

    plt.figure(1)
    plt.subplot(121)
    plt.imshow(img_data_raw, plt.cm.gray)

    plt.subplot(122)
    plt.imshow(np.abs(sfft), norm=LogNorm(vmin=5))
    plt.show()


def filter_high(r, img_data_raw):
    sfft = twodfft(img_data_raw)
    # the 2dfft generated by our function

    w, h = sfft.shape
    r = 0.03
    sfft[int(r * w):int(w * (1 - r))] = 0
    sfft[:, int(h * r):int(h * (1 - r))] = 0
    new = twodfft_inverse(sfft)
    new_im = new[0:474, 0:630]
    plt.figure(1)
    plt.subplot(121)
    plt.imshow(img_data_raw, plt.cm.gray)

    plt.subplot(122)
    plt.imshow(new_im.real, plt.cm.gray)
    plt.show()


def filterLow(r, img_data_raw):
    sfft = twodfft(img_data_raw)
    # the 2dfft generated by our function

    w, h = sfft.shape
    r = 0.03
    sfft[0:int(w * 0.1), 0:int(h * 0.1)] = 0
    sfft[0:int(w * 0.1), int(h * 0.9):h] = 0
    sfft[int(w * 0.9):w, int(h * 0.9):h] = 0
    sfft[int(w * 0.9):w, 0:int(h * 0.1)] = 0
    new = twodfft_inverse(sfft)
    new_im = new[0:474, 0:630]
    plt.figure(1)
    plt.subplot(121)
    plt.imshow(img_data_raw, plt.cm.gray)

    plt.subplot(122)
    plt.imshow(new_im.real, plt.cm.gray)
    plt.show()


def compress(img_data_raw):
    w, h = img_data_raw.shape
    img_fft = twodfft(img_data_raw)
    compression_percentage = np.linspace(0, 0.95, 6)
    fig, axis = plt.subplots(2, 3)
    for i in range(0, 6):
        compressed_fft = smallest_coefficient_compression(img_fft, compression_percentage[i])
        img = twodfft_inverse(compressed_fft).real[:w, :h]
        axis[int(i / 3)][int(i % 3)].imshow(abs(img), cmap='gray')
        axis[int(i / 3)][int(i % 3)].set_title(str(compression_percentage[i]) + " compression")

    plt.show()


def high_frequency_compression(img_fft, removal_percentage):
    if removal_percentage == 0:
        return img_fft

    w, h = img_fft.shape
    p = math.sqrt((1 - removal_percentage) / 4)

    img_fft[int(w * p):int(- w * p)] = 0
    img_fft[:, int(h * p):int(- h * p)] = 0

    print("----- compression percentage: ", removal_percentage, " -----")
    print("number of zeros: ", np.count_nonzero(img_fft))
    print("zero percentage: ", 1 - (np.count_nonzero(img_fft)/(w*h)))

    np.savetxt(str(round(removal_percentage, 2)) + "_frequency_compression.csv", img_fft, delimiter=',')

    return img_fft


def smallest_coefficient_compression(img_fft, removal_percentage):
    width, height = img_fft.shape
    num_remove = int(width * height * removal_percentage)
    sorted_index = np.argsort(abs(img_fft), axis=None)[:num_remove]
    np.put(img_fft, sorted_index, np.zeros((num_remove, 1)))

    print("----- compression percentage: ", removal_percentage, " -----")
    print("number of zeros: ", np.count_nonzero(img_fft))
    print("zero percentage: ", 1 - (np.count_nonzero(img_fft)/(width*height)))

    np.savetxt(str(round(removal_percentage, 2)) + "_coefficient_compression.csv", img_fft, delimiter=',')

    return img_fft


# def run_time_evaluation():
#     # size = [2^5, 2^6, 2^7, 2^8, 2^9, 2^10]
#     size = [2^5]
#     for s in size:
#         data = np.random.rand((s, s))
#         result = []
#         for i in range(10):


if __name__ == '__main__':
    mode = 1
    img = "moonlanding.png"
    index = 1
    while index < len(sys.argv):
        if sys.argv[index] == "-m":
            index += 1
            mode = int(sys.argv[index])
        elif sys.argv[index] == "-i":
            index += 1
            img = sys.argv[index]
        else:
            print("error in argument")
            exit()

        index += 1

    img_data_raw = plt.imread(img).astype(float)
    # img_data_raw = io.imread(img, as_gray=True)
    # img_fft = twodfft(img_data_raw)
    # isfft = twodfft_inverse(img_fft)[:img_data_raw.shape[0], :img_data_raw.shape[1]]
    # plt.imshow(isfft.real, cmap="gray")
    # plt.show()
    # plt.imshow(img_data_raw, cmap='gray')
    # plt.show()

    if mode == 1:
        # call mode 1 function
        mode1(img_data_raw)
        exit()

    if mode == 2:
        # call mode 2 function
        filter_high(0.05, img_data_raw)
        exit()

    if mode == 3:
        # call mode 3 function
        compress(img_data_raw)
        exit()

    if mode == 4:
        # call mode 4 function
        exit()
